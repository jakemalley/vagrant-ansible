---
- name: add vimrc settings for YAML
  lineinfile:
    path: /root/.vimrc
    create: true
    line: "{{ line }}"
  loop_control:
    loop_var: line
  loop:
    - au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml
    - autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab autoindent

- name: install bash-completion
  package:
    name: bash-completion
    state: present

- name: add bash completion
  lineinfile:
    path: /root/.bashrc
    create: true
    line: "{{ line }}"
  loop_control:
    loop_var: line
  loop:
    - export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    - source /usr/share/bash-completion/bash_completion
    - source <(kubectl completion bash)
    - alias k=kubectl
    - complete -F __start_kubectl k

- name: set k3s server token
  block:
    - name: lookup k3s server token
      slurp:
        src: "{{ __k3s_server_token_file }}"
      register: r_slurp_k3s_server_token
      when: k3s_primary | bool

    - name: set fact for k3s server token
      set_fact:
        __k3s_server_token: "{{ r_slurp_k3s_server_token['content'] | b64decode }}"
      when: k3s_primary | bool

  rescue:
    - name: generate k3s server token
      set_fact:
        __k3s_server_token: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=64') }}"

  always:
    - name: write k3s server token
      copy:
        dest: "{{ __k3s_server_token_file }}"
        owner: root
        group: root
        mode: 0400
        content: "{{ hostvars[groups['servers'][0]]['__k3s_server_token'] }}"

- name: configure k3s servers
  import_tasks: config.yml

- name: run installer on primary server node
  include_tasks: run_installer.yml
  when: k3s_primary | bool

- name: pause to allow primary to start
  pause:
    seconds: 5

- name: run installer on remaining server nodes
  include_tasks: run_installer.yml
  when: not (k3s_primary | bool)

- name: read k3s node token from primary
  block:
    - name: lookup k3s node token
      slurp:
        src: "{{ __k3s_default_node_token_file }}"
      register: r_slurp_k3s_node_token

    - name: set fact for k3s node token
      set_fact:
        __k3s_node_token: "{{ r_slurp_k3s_node_token['content'] | b64decode }}"
  when: k3s_primary | bool

- name: ensure the k3s server service is started
  service:
    name: "{{ __k3s_server_service }}"
    state: started
    enabled: true
  throttle: 1
  delay: 5
