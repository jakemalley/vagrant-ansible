---
- name: start and enable firewalld
  service:
    name: firewalld
    state: started
    enabled: true

- name: enable masquerade on k3s
  ansible.posix.firewalld:
    masquerade: "yes"
    state: enabled
    permanent: true
  notify: reload firewalld

- name: remove default public services
  ansible.posix.firewalld:
    service: "{{ item }}"
    zone: public
    state: disabled
    permanent: true
  loop:
    - dhcpv6-client
    - cockpit
  notify: reload firewalld

- name: allow ssh from public
  ansible.posix.firewalld:
    service: ssh
    zone: public
    state: enabled
    permanent: true
  notify: reload firewalld

- name: allow 6443/tcp (Kubernetes API) from public
  ansible.posix.firewalld:
    rich_rule: >
      rule family="ipv4" port port="6443" protocol="tcp" accept
    zone: public
    state: enabled
    permanent: true
  when:
    - k3s_role == "server"
    - k3s_firewall_allow_api_access | bool
  notify: reload firewalld

- name: allow 6443/tcp (Kubernetes API) from nodes
  ansible.posix.firewalld:
    rich_rule: >
      rule family="ipv4" source address="{{ item }}"
      port port="6443" protocol="udp" accept
    zone: public
    state: enabled
    permanent: true
  loop: "{{ __node_ip_addresses | default([k3s_node_cidr], true) }}"
  when:
    - k3s_role == "server"
    - not k3s_firewall_allow_api_access | bool
  notify: reload firewalld

- name: enable 2379/tcp (Embedded Etcd) from server nodes
  ansible.posix.firewalld:
    rich_rule: >
      rule family="ipv4" source address="{{ item }}"
      port port="2379" protocol="tcp" accept
    permanent: true
    state: enabled
  loop: "{{ __server_node_ip_addresses | reject('match', __node_external_ip) }}"
  when:
    - k3s_role == "server"
  notify: reload firewalld

- name: enable 2380/tcp (Embedded Etcd) from server nodes
  ansible.posix.firewalld:
    rich_rule: >
      rule family="ipv4" source address="{{ item }}"
      port port="2380" protocol="tcp" accept
    permanent: true
    state: enabled
  loop: "{{ __server_node_ip_addresses | reject('match', __node_external_ip) }}"
  when:
    - k3s_role == "server"
  notify: reload firewalld

- name: enable 8472/udp (Flannel VXLAN) from all nodes
  ansible.posix.firewalld:
    rich_rule: >
      rule family="ipv4" source address="{{ item }}"
      port port="8472" protocol="udp" accept
    permanent: true
    state: enabled
  notify: reload firewalld
  loop: "{{ __node_ip_addresses | default([k3s_node_cidr], true) }}"

- name: enable 10250/tcp (kubelet) from all nodes
  ansible.posix.firewalld:
    rich_rule: >
      rule family="ipv4" source address="{{ item }}"
      port port="10250" protocol="tcp" accept
    permanent: true
    state: enabled
  notify: reload firewalld
  loop: "{{ __node_ip_addresses | default([k3s_node_cidr], true) }}"

- name: enable 8443/tcp from server nodes
  ansible.posix.firewalld:
    rich_rule: >
      rule family="ipv4" source address="{{ item }}"
      port port="8443" protocol="tcp" accept
    permanent: true
    state: enabled
  notify: reload firewalld
  loop: "{{ __server_node_ip_addresses | reject('match', __node_external_ip) }}"
  when: haproxy_keepalived_vip | default("", true) != ""

- name: enable vrrp (keepalived) from server nodes
  ansible.posix.firewalld:
    rich_rule: >
      rule family="ipv4" source address="{{ item }}"
      protocol value="vrrp" accept
    permanent: true
    state: enabled
  notify: reload firewalld
  loop: "{{ __server_node_ip_addresses | reject('match', __node_external_ip) }}"
  when: haproxy_keepalived_vip | default("", true) != ""

- name: add cluster-cidr to the firewalld trusted zone
  ansible.posix.firewalld:
    source: "{{ k3s_cluster_cidr }}"
    zone: trusted
    permanent: true
    state: enabled
  notify: reload firewalld

- name: add service-cidr to the firewalld trusted zone
  ansible.posix.firewalld:
    source: "{{ k3s_service_cidr }}"
    zone: trusted
    permanent: true
    state: enabled
  notify: reload firewalld

- name: allow http/s for ingress traffic
  ansible.posix.firewalld:
    service: "{{ item }}"
    state: enabled
    permanent: true
  notify: reload firewalld
  loop:
    - http
    - https
  when: k3s_role == "server"

- meta: flush_handlers
